package com.util.nbc_data_layer.nbcGreenDaoSrcGen;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.util.nbc_data_layer.nbcGreenDaoSrcGen.RelatedItemsTable;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table RELATED_ITEMS_TABLE.
*/
public class RelatedItemsTableDao extends AbstractDao<RelatedItemsTable, Long> {

    public static final String TABLENAME = "RELATED_ITEMS_TABLE";

    /**
     * Properties of entity RelatedItemsTable.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property ParentCmsID = new Property(0, long.class, "ParentCmsID", true, "PARENT_CMS_ID");
        public final static Property RelCmsID = new Property(1, int.class, "RelCmsID", false, "REL_CMS_ID");
        public final static Property ContentType = new Property(2, String.class, "ContentType", false, "CONTENT_TYPE");
        public final static Property Title = new Property(3, String.class, "Title", false, "TITLE");
        public final static Property Sponsored = new Property(4, boolean.class, "Sponsored", false, "SPONSORED");
        public final static Property Source = new Property(5, String.class, "Source", false, "SOURCE");
        public final static Property MobileThumbnailUrl = new Property(6, String.class, "MobileThumbnailUrl", false, "MOBILE_THUMBNAIL_URL");
        public final static Property StoryThumbnailUrl = new Property(7, String.class, "StoryThumbnailUrl", false, "STORY_THUMBNAIL_URL");
        public final static Property SharingUrl = new Property(8, String.class, "SharingUrl", false, "SHARING_URL");
        public final static Property TypeID = new Property(9, int.class, "TypeID", false, "TYPE_ID");
    };


    public RelatedItemsTableDao(DaoConfig config) {
        super(config);
    }
    
    public RelatedItemsTableDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'RELATED_ITEMS_TABLE' (" + //
                "'PARENT_CMS_ID' INTEGER PRIMARY KEY NOT NULL ," + // 0: ParentCmsID
                "'REL_CMS_ID' INTEGER NOT NULL ," + // 1: RelCmsID
                "'CONTENT_TYPE' TEXT NOT NULL ," + // 2: ContentType
                "'TITLE' TEXT NOT NULL ," + // 3: Title
                "'SPONSORED' INTEGER NOT NULL ," + // 4: Sponsored
                "'SOURCE' TEXT NOT NULL ," + // 5: Source
                "'MOBILE_THUMBNAIL_URL' TEXT NOT NULL ," + // 6: MobileThumbnailUrl
                "'STORY_THUMBNAIL_URL' TEXT NOT NULL ," + // 7: StoryThumbnailUrl
                "'SHARING_URL' TEXT NOT NULL ," + // 8: SharingUrl
                "'TYPE_ID' INTEGER NOT NULL );"); // 9: TypeID
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'RELATED_ITEMS_TABLE'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, RelatedItemsTable entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getParentCmsID());
        stmt.bindLong(2, entity.getRelCmsID());
        stmt.bindString(3, entity.getContentType());
        stmt.bindString(4, entity.getTitle());
        stmt.bindLong(5, entity.getSponsored() ? 1l: 0l);
        stmt.bindString(6, entity.getSource());
        stmt.bindString(7, entity.getMobileThumbnailUrl());
        stmt.bindString(8, entity.getStoryThumbnailUrl());
        stmt.bindString(9, entity.getSharingUrl());
        stmt.bindLong(10, entity.getTypeID());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public RelatedItemsTable readEntity(Cursor cursor, int offset) {
        RelatedItemsTable entity = new RelatedItemsTable( //
            cursor.getLong(offset + 0), // ParentCmsID
            cursor.getInt(offset + 1), // RelCmsID
            cursor.getString(offset + 2), // ContentType
            cursor.getString(offset + 3), // Title
            cursor.getShort(offset + 4) != 0, // Sponsored
            cursor.getString(offset + 5), // Source
            cursor.getString(offset + 6), // MobileThumbnailUrl
            cursor.getString(offset + 7), // StoryThumbnailUrl
            cursor.getString(offset + 8), // SharingUrl
            cursor.getInt(offset + 9) // TypeID
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, RelatedItemsTable entity, int offset) {
        entity.setParentCmsID(cursor.getLong(offset + 0));
        entity.setRelCmsID(cursor.getInt(offset + 1));
        entity.setContentType(cursor.getString(offset + 2));
        entity.setTitle(cursor.getString(offset + 3));
        entity.setSponsored(cursor.getShort(offset + 4) != 0);
        entity.setSource(cursor.getString(offset + 5));
        entity.setMobileThumbnailUrl(cursor.getString(offset + 6));
        entity.setStoryThumbnailUrl(cursor.getString(offset + 7));
        entity.setSharingUrl(cursor.getString(offset + 8));
        entity.setTypeID(cursor.getInt(offset + 9));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(RelatedItemsTable entity, long rowId) {
        entity.setParentCmsID(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(RelatedItemsTable entity) {
        if(entity != null) {
            return entity.getParentCmsID();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
