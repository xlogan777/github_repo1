package com.util.nbc_data_layer.nbcGreenDaoSrcGen;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;

import com.util.nbc_data_layer.nbcGreenDaoSrcGen.ContentItemMediaTable;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table CONTENT_ITEM_MEDIA_TABLE.
*/
public class ContentItemMediaTableDao extends AbstractDao<ContentItemMediaTable, Long> {

    public static final String TABLENAME = "CONTENT_ITEM_MEDIA_TABLE";

    /**
     * Properties of entity ContentItemMediaTable.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property CmsID = new Property(0, long.class, "CmsID", true, "CMS_ID");
        public final static Property MediaUrlType = new Property(1, long.class, "MediaUrlType", false, "MEDIA_URL_TYPE");
        public final static Property MediaPhotoThumbnailUrlType = new Property(2, long.class, "MediaPhotoThumbnailUrlType", false, "MEDIA_PHOTO_THUMBNAIL_URL_TYPE");
        public final static Property MediaThumbnailUrlType = new Property(3, long.class, "MediaThumbnailUrlType", false, "MEDIA_THUMBNAIL_URL_TYPE");
        public final static Property MediaUrlImgTypeRowID = new Property(4, long.class, "mediaUrlImgTypeRowID", false, "MEDIA_URL_IMG_TYPE_ROW_ID");
        public final static Property MediaPhotoThumbnailUrlImgTypeRowID = new Property(5, long.class, "mediaPhotoThumbnailUrlImgTypeRowID", false, "MEDIA_PHOTO_THUMBNAIL_URL_IMG_TYPE_ROW_ID");
        public final static Property MediaThumbnailUrlImgTypeRowID = new Property(6, long.class, "mediaThumbnailUrlImgTypeRowID", false, "MEDIA_THUMBNAIL_URL_IMG_TYPE_ROW_ID");
    };

    private DaoSession daoSession;


    public ContentItemMediaTableDao(DaoConfig config) {
        super(config);
    }
    
    public ContentItemMediaTableDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'CONTENT_ITEM_MEDIA_TABLE' (" + //
                "'CMS_ID' INTEGER PRIMARY KEY NOT NULL ," + // 0: CmsID
                "'MEDIA_URL_TYPE' INTEGER NOT NULL ," + // 1: MediaUrlType
                "'MEDIA_PHOTO_THUMBNAIL_URL_TYPE' INTEGER NOT NULL ," + // 2: MediaPhotoThumbnailUrlType
                "'MEDIA_THUMBNAIL_URL_TYPE' INTEGER NOT NULL ," + // 3: MediaThumbnailUrlType
                "'MEDIA_URL_IMG_TYPE_ROW_ID' INTEGER NOT NULL ," + // 4: mediaUrlImgTypeRowID
                "'MEDIA_PHOTO_THUMBNAIL_URL_IMG_TYPE_ROW_ID' INTEGER NOT NULL ," + // 5: mediaPhotoThumbnailUrlImgTypeRowID
                "'MEDIA_THUMBNAIL_URL_IMG_TYPE_ROW_ID' INTEGER NOT NULL );"); // 6: mediaThumbnailUrlImgTypeRowID
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'CONTENT_ITEM_MEDIA_TABLE'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ContentItemMediaTable entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getCmsID());
        stmt.bindLong(2, entity.getMediaUrlType());
        stmt.bindLong(3, entity.getMediaPhotoThumbnailUrlType());
        stmt.bindLong(4, entity.getMediaThumbnailUrlType());
        stmt.bindLong(5, entity.getMediaUrlImgTypeRowID());
        stmt.bindLong(6, entity.getMediaPhotoThumbnailUrlImgTypeRowID());
        stmt.bindLong(7, entity.getMediaThumbnailUrlImgTypeRowID());
    }

    @Override
    protected void attachEntity(ContentItemMediaTable entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public ContentItemMediaTable readEntity(Cursor cursor, int offset) {
        ContentItemMediaTable entity = new ContentItemMediaTable( //
            cursor.getLong(offset + 0), // CmsID
            cursor.getLong(offset + 1), // MediaUrlType
            cursor.getLong(offset + 2), // MediaPhotoThumbnailUrlType
            cursor.getLong(offset + 3), // MediaThumbnailUrlType
            cursor.getLong(offset + 4), // mediaUrlImgTypeRowID
            cursor.getLong(offset + 5), // mediaPhotoThumbnailUrlImgTypeRowID
            cursor.getLong(offset + 6) // mediaThumbnailUrlImgTypeRowID
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ContentItemMediaTable entity, int offset) {
        entity.setCmsID(cursor.getLong(offset + 0));
        entity.setMediaUrlType(cursor.getLong(offset + 1));
        entity.setMediaPhotoThumbnailUrlType(cursor.getLong(offset + 2));
        entity.setMediaThumbnailUrlType(cursor.getLong(offset + 3));
        entity.setMediaUrlImgTypeRowID(cursor.getLong(offset + 4));
        entity.setMediaPhotoThumbnailUrlImgTypeRowID(cursor.getLong(offset + 5));
        entity.setMediaThumbnailUrlImgTypeRowID(cursor.getLong(offset + 6));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(ContentItemMediaTable entity, long rowId) {
        entity.setCmsID(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(ContentItemMediaTable entity) {
        if(entity != null) {
            return entity.getCmsID();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getUrlImgFileTableDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getUrlImgFileTableDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T2", daoSession.getUrlImgFileTableDao().getAllColumns());
            builder.append(" FROM CONTENT_ITEM_MEDIA_TABLE T");
            builder.append(" LEFT JOIN URL_IMG_FILE_TABLE T0 ON T.'MEDIA_URL_IMG_TYPE_ROW_ID'=T0.'_id'");
            builder.append(" LEFT JOIN URL_IMG_FILE_TABLE T1 ON T.'MEDIA_PHOTO_THUMBNAIL_URL_IMG_TYPE_ROW_ID'=T1.'_id'");
            builder.append(" LEFT JOIN URL_IMG_FILE_TABLE T2 ON T.'MEDIA_THUMBNAIL_URL_IMG_TYPE_ROW_ID'=T2.'_id'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected ContentItemMediaTable loadCurrentDeep(Cursor cursor, boolean lock) {
        ContentItemMediaTable entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        UrlImgFileTable mediaUrlImgType = loadCurrentOther(daoSession.getUrlImgFileTableDao(), cursor, offset);
         if(mediaUrlImgType != null) {
            entity.setMediaUrlImgType(mediaUrlImgType);
        }
        offset += daoSession.getUrlImgFileTableDao().getAllColumns().length;

        UrlImgFileTable mediaPhotoThumbnailUrlImgType = loadCurrentOther(daoSession.getUrlImgFileTableDao(), cursor, offset);
         if(mediaPhotoThumbnailUrlImgType != null) {
            entity.setMediaPhotoThumbnailUrlImgType(mediaPhotoThumbnailUrlImgType);
        }
        offset += daoSession.getUrlImgFileTableDao().getAllColumns().length;

        UrlImgFileTable mediaThumbnailUrlImgType = loadCurrentOther(daoSession.getUrlImgFileTableDao(), cursor, offset);
         if(mediaThumbnailUrlImgType != null) {
            entity.setMediaThumbnailUrlImgType(mediaThumbnailUrlImgType);
        }

        return entity;    
    }

    public ContentItemMediaTable loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<ContentItemMediaTable> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<ContentItemMediaTable> list = new ArrayList<ContentItemMediaTable>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<ContentItemMediaTable> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<ContentItemMediaTable> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
