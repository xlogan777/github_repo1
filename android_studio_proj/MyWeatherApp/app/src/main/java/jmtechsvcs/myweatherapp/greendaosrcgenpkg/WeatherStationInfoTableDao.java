package jmtechsvcs.myweatherapp.greendaosrcgenpkg;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import jmtechsvcs.myweatherapp.greendaosrcgenpkg.WeatherStationInfoTable;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "WEATHER_STATION_INFO_TABLE".
*/
public class WeatherStationInfoTableDao extends AbstractDao<WeatherStationInfoTable, Long> {

    public static final String TABLENAME = "WEATHER_STATION_INFO_TABLE";

    /**
     * Properties of entity WeatherStationInfoTable.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Station_id = new Property(0, long.class, "station_id", true, "STATION_ID");
        public final static Property City_id = new Property(1, long.class, "city_id", false, "CITY_ID");
        public final static Property Station_name = new Property(2, String.class, "station_name", false, "STATION_NAME");
        public final static Property Station_temp = new Property(3, double.class, "station_temp", false, "STATION_TEMP");
        public final static Property Station_pressure = new Property(4, long.class, "station_pressure", false, "STATION_PRESSURE");
        public final static Property Station_humidity = new Property(5, long.class, "station_humidity", false, "STATION_HUMIDITY");
        public final static Property Station_wind_speed = new Property(6, double.class, "station_wind_speed", false, "STATION_WIND_SPEED");
        public final static Property Station_wind_deg = new Property(7, long.class, "station_wind_deg", false, "STATION_WIND_DEG");
        public final static Property Station_wind_gust = new Property(8, double.class, "station_wind_gust", false, "STATION_WIND_GUST");
        public final static Property Station_visibility_dist = new Property(9, long.class, "station_visibility_dist", false, "STATION_VISIBILITY_DIST");
        public final static Property Station_calc_dewpt = new Property(10, double.class, "station_calc_dewpt", false, "STATION_CALC_DEWPT");
        public final static Property Station_calc_humidex = new Property(11, double.class, "station_calc_humidex", false, "STATION_CALC_HUMIDEX");
        public final static Property Station_clouds_dist = new Property(12, long.class, "station_clouds_dist", false, "STATION_CLOUDS_DIST");
        public final static Property Station_clouds_cond = new Property(13, String.class, "station_clouds_cond", false, "STATION_CLOUDS_COND");
        public final static Property Station_rain_1h = new Property(14, double.class, "station_rain_1h", false, "STATION_RAIN_1H");
        public final static Property Station_rain_24h = new Property(15, double.class, "station_rain_24h", false, "STATION_RAIN_24H");
        public final static Property Station_rain_today = new Property(16, double.class, "station_rain_today", false, "STATION_RAIN_TODAY");
        public final static Property Last_update_time = new Property(17, long.class, "last_update_time", false, "LAST_UPDATE_TIME");
    };


    public WeatherStationInfoTableDao(DaoConfig config) {
        super(config);
    }
    
    public WeatherStationInfoTableDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"WEATHER_STATION_INFO_TABLE\" (" + //
                "\"STATION_ID\" INTEGER PRIMARY KEY NOT NULL ," + // 0: station_id
                "\"CITY_ID\" INTEGER NOT NULL ," + // 1: city_id
                "\"STATION_NAME\" TEXT NOT NULL ," + // 2: station_name
                "\"STATION_TEMP\" REAL NOT NULL ," + // 3: station_temp
                "\"STATION_PRESSURE\" INTEGER NOT NULL ," + // 4: station_pressure
                "\"STATION_HUMIDITY\" INTEGER NOT NULL ," + // 5: station_humidity
                "\"STATION_WIND_SPEED\" REAL NOT NULL ," + // 6: station_wind_speed
                "\"STATION_WIND_DEG\" INTEGER NOT NULL ," + // 7: station_wind_deg
                "\"STATION_WIND_GUST\" REAL NOT NULL ," + // 8: station_wind_gust
                "\"STATION_VISIBILITY_DIST\" INTEGER NOT NULL ," + // 9: station_visibility_dist
                "\"STATION_CALC_DEWPT\" REAL NOT NULL ," + // 10: station_calc_dewpt
                "\"STATION_CALC_HUMIDEX\" REAL NOT NULL ," + // 11: station_calc_humidex
                "\"STATION_CLOUDS_DIST\" INTEGER NOT NULL ," + // 12: station_clouds_dist
                "\"STATION_CLOUDS_COND\" TEXT NOT NULL ," + // 13: station_clouds_cond
                "\"STATION_RAIN_1H\" REAL NOT NULL ," + // 14: station_rain_1h
                "\"STATION_RAIN_24H\" REAL NOT NULL ," + // 15: station_rain_24h
                "\"STATION_RAIN_TODAY\" REAL NOT NULL ," + // 16: station_rain_today
                "\"LAST_UPDATE_TIME\" INTEGER NOT NULL );"); // 17: last_update_time
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"WEATHER_STATION_INFO_TABLE\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, WeatherStationInfoTable entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getStation_id());
        stmt.bindLong(2, entity.getCity_id());
        stmt.bindString(3, entity.getStation_name());
        stmt.bindDouble(4, entity.getStation_temp());
        stmt.bindLong(5, entity.getStation_pressure());
        stmt.bindLong(6, entity.getStation_humidity());
        stmt.bindDouble(7, entity.getStation_wind_speed());
        stmt.bindLong(8, entity.getStation_wind_deg());
        stmt.bindDouble(9, entity.getStation_wind_gust());
        stmt.bindLong(10, entity.getStation_visibility_dist());
        stmt.bindDouble(11, entity.getStation_calc_dewpt());
        stmt.bindDouble(12, entity.getStation_calc_humidex());
        stmt.bindLong(13, entity.getStation_clouds_dist());
        stmt.bindString(14, entity.getStation_clouds_cond());
        stmt.bindDouble(15, entity.getStation_rain_1h());
        stmt.bindDouble(16, entity.getStation_rain_24h());
        stmt.bindDouble(17, entity.getStation_rain_today());
        stmt.bindLong(18, entity.getLast_update_time());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public WeatherStationInfoTable readEntity(Cursor cursor, int offset) {
        WeatherStationInfoTable entity = new WeatherStationInfoTable( //
            cursor.getLong(offset + 0), // station_id
            cursor.getLong(offset + 1), // city_id
            cursor.getString(offset + 2), // station_name
            cursor.getDouble(offset + 3), // station_temp
            cursor.getLong(offset + 4), // station_pressure
            cursor.getLong(offset + 5), // station_humidity
            cursor.getDouble(offset + 6), // station_wind_speed
            cursor.getLong(offset + 7), // station_wind_deg
            cursor.getDouble(offset + 8), // station_wind_gust
            cursor.getLong(offset + 9), // station_visibility_dist
            cursor.getDouble(offset + 10), // station_calc_dewpt
            cursor.getDouble(offset + 11), // station_calc_humidex
            cursor.getLong(offset + 12), // station_clouds_dist
            cursor.getString(offset + 13), // station_clouds_cond
            cursor.getDouble(offset + 14), // station_rain_1h
            cursor.getDouble(offset + 15), // station_rain_24h
            cursor.getDouble(offset + 16), // station_rain_today
            cursor.getLong(offset + 17) // last_update_time
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, WeatherStationInfoTable entity, int offset) {
        entity.setStation_id(cursor.getLong(offset + 0));
        entity.setCity_id(cursor.getLong(offset + 1));
        entity.setStation_name(cursor.getString(offset + 2));
        entity.setStation_temp(cursor.getDouble(offset + 3));
        entity.setStation_pressure(cursor.getLong(offset + 4));
        entity.setStation_humidity(cursor.getLong(offset + 5));
        entity.setStation_wind_speed(cursor.getDouble(offset + 6));
        entity.setStation_wind_deg(cursor.getLong(offset + 7));
        entity.setStation_wind_gust(cursor.getDouble(offset + 8));
        entity.setStation_visibility_dist(cursor.getLong(offset + 9));
        entity.setStation_calc_dewpt(cursor.getDouble(offset + 10));
        entity.setStation_calc_humidex(cursor.getDouble(offset + 11));
        entity.setStation_clouds_dist(cursor.getLong(offset + 12));
        entity.setStation_clouds_cond(cursor.getString(offset + 13));
        entity.setStation_rain_1h(cursor.getDouble(offset + 14));
        entity.setStation_rain_24h(cursor.getDouble(offset + 15));
        entity.setStation_rain_today(cursor.getDouble(offset + 16));
        entity.setLast_update_time(cursor.getLong(offset + 17));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(WeatherStationInfoTable entity, long rowId) {
        entity.setStation_id(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(WeatherStationInfoTable entity) {
        if(entity != null) {
            return entity.getStation_id();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
