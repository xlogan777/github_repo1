package com.util.nbc_data_layer.nbcGreenDaoSrcGen;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.util.nbc_data_layer.nbcGreenDaoSrcGen.ContentItemDetailTable;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table CONTENT_ITEM_DETAIL_TABLE.
*/
public class ContentItemDetailTableDao extends AbstractDao<ContentItemDetailTable, Long> {

    public static final String TABLENAME = "CONTENT_ITEM_DETAIL_TABLE";

    /**
     * Properties of entity ContentItemDetailTable.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property CmsID = new Property(0, long.class, "CmsID", true, "CMS_ID");
        public final static Property DisplayTimeStamp = new Property(1, String.class, "DisplayTimeStamp", false, "DISPLAY_TIME_STAMP");
        public final static Property Flag = new Property(2, boolean.class, "Flag", false, "FLAG");
        public final static Property Title = new Property(3, String.class, "Title", false, "TITLE");
        public final static Property FullTitle = new Property(4, String.class, "FullTitle", false, "FULL_TITLE");
        public final static Property SubTitle = new Property(5, String.class, "SubTitle", false, "SUB_TITLE");
        public final static Property Description = new Property(6, String.class, "Description", false, "DESCRIPTION");
        public final static Property VideoLength = new Property(7, long.class, "VideoLength", false, "VIDEO_LENGTH");
        public final static Property UsingPlaceholderImg = new Property(8, boolean.class, "UsingPlaceholderImg", false, "USING_PLACEHOLDER_IMG");
        public final static Property USWorldTarget = new Property(9, boolean.class, "USWorldTarget", false, "USWORLD_TARGET");
        public final static Property ContentSectionName = new Property(10, String.class, "ContentSectionName", false, "CONTENT_SECTION_NAME");
        public final static Property ContentSectionNameCss = new Property(11, String.class, "ContentSectionNameCss", false, "CONTENT_SECTION_NAME_CSS");
        public final static Property ContentSubSectionName = new Property(12, String.class, "ContentSubSectionName", false, "CONTENT_SUB_SECTION_NAME");
        public final static Property ContentSubSectionNameCss = new Property(13, String.class, "ContentSubSectionNameCss", false, "CONTENT_SUB_SECTION_NAME_CSS");
    };


    public ContentItemDetailTableDao(DaoConfig config) {
        super(config);
    }
    
    public ContentItemDetailTableDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'CONTENT_ITEM_DETAIL_TABLE' (" + //
                "'CMS_ID' INTEGER PRIMARY KEY NOT NULL ," + // 0: CmsID
                "'DISPLAY_TIME_STAMP' TEXT NOT NULL ," + // 1: DisplayTimeStamp
                "'FLAG' INTEGER NOT NULL ," + // 2: Flag
                "'TITLE' TEXT NOT NULL ," + // 3: Title
                "'FULL_TITLE' TEXT NOT NULL ," + // 4: FullTitle
                "'SUB_TITLE' TEXT NOT NULL ," + // 5: SubTitle
                "'DESCRIPTION' TEXT NOT NULL ," + // 6: Description
                "'VIDEO_LENGTH' INTEGER NOT NULL ," + // 7: VideoLength
                "'USING_PLACEHOLDER_IMG' INTEGER NOT NULL ," + // 8: UsingPlaceholderImg
                "'USWORLD_TARGET' INTEGER NOT NULL ," + // 9: USWorldTarget
                "'CONTENT_SECTION_NAME' TEXT NOT NULL ," + // 10: ContentSectionName
                "'CONTENT_SECTION_NAME_CSS' TEXT NOT NULL ," + // 11: ContentSectionNameCss
                "'CONTENT_SUB_SECTION_NAME' TEXT NOT NULL ," + // 12: ContentSubSectionName
                "'CONTENT_SUB_SECTION_NAME_CSS' TEXT NOT NULL );"); // 13: ContentSubSectionNameCss
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'CONTENT_ITEM_DETAIL_TABLE'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ContentItemDetailTable entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getCmsID());
        stmt.bindString(2, entity.getDisplayTimeStamp());
        stmt.bindLong(3, entity.getFlag() ? 1l: 0l);
        stmt.bindString(4, entity.getTitle());
        stmt.bindString(5, entity.getFullTitle());
        stmt.bindString(6, entity.getSubTitle());
        stmt.bindString(7, entity.getDescription());
        stmt.bindLong(8, entity.getVideoLength());
        stmt.bindLong(9, entity.getUsingPlaceholderImg() ? 1l: 0l);
        stmt.bindLong(10, entity.getUSWorldTarget() ? 1l: 0l);
        stmt.bindString(11, entity.getContentSectionName());
        stmt.bindString(12, entity.getContentSectionNameCss());
        stmt.bindString(13, entity.getContentSubSectionName());
        stmt.bindString(14, entity.getContentSubSectionNameCss());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public ContentItemDetailTable readEntity(Cursor cursor, int offset) {
        ContentItemDetailTable entity = new ContentItemDetailTable( //
            cursor.getLong(offset + 0), // CmsID
            cursor.getString(offset + 1), // DisplayTimeStamp
            cursor.getShort(offset + 2) != 0, // Flag
            cursor.getString(offset + 3), // Title
            cursor.getString(offset + 4), // FullTitle
            cursor.getString(offset + 5), // SubTitle
            cursor.getString(offset + 6), // Description
            cursor.getLong(offset + 7), // VideoLength
            cursor.getShort(offset + 8) != 0, // UsingPlaceholderImg
            cursor.getShort(offset + 9) != 0, // USWorldTarget
            cursor.getString(offset + 10), // ContentSectionName
            cursor.getString(offset + 11), // ContentSectionNameCss
            cursor.getString(offset + 12), // ContentSubSectionName
            cursor.getString(offset + 13) // ContentSubSectionNameCss
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ContentItemDetailTable entity, int offset) {
        entity.setCmsID(cursor.getLong(offset + 0));
        entity.setDisplayTimeStamp(cursor.getString(offset + 1));
        entity.setFlag(cursor.getShort(offset + 2) != 0);
        entity.setTitle(cursor.getString(offset + 3));
        entity.setFullTitle(cursor.getString(offset + 4));
        entity.setSubTitle(cursor.getString(offset + 5));
        entity.setDescription(cursor.getString(offset + 6));
        entity.setVideoLength(cursor.getLong(offset + 7));
        entity.setUsingPlaceholderImg(cursor.getShort(offset + 8) != 0);
        entity.setUSWorldTarget(cursor.getShort(offset + 9) != 0);
        entity.setContentSectionName(cursor.getString(offset + 10));
        entity.setContentSectionNameCss(cursor.getString(offset + 11));
        entity.setContentSubSectionName(cursor.getString(offset + 12));
        entity.setContentSubSectionNameCss(cursor.getString(offset + 13));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(ContentItemDetailTable entity, long rowId) {
        entity.setCmsID(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(ContentItemDetailTable entity) {
        if(entity != null) {
            return entity.getCmsID();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
