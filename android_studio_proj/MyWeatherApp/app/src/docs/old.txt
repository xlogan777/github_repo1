
public enum T_Http_Get_Type
{
E_HTTP_CLIENT_TYPE,
E_HTTP_URL_TYPE
}


switch(httpGetType)
	{
		case E_HTTP_CLIENT_TYPE:

			// create HttpClient
			HttpClient httpclient = new DefaultHttpClient();

			//make the http get
			HttpGet get_request = new HttpGet(url);

			// make GET request to the given URL
			HttpResponse httpResponse = httpclient.execute(get_request);


			//get status code from http response.
			int status = httpResponse.getStatusLine().getStatusCode();

			if(HttpStatus.SC_OK == status)
			{
				// receive response as inputStream, will return a valid input stream
				//otherwise will throw an exception.
				rv = httpResponse.getEntity().getContent();
			}

			break;

		case E_HTTP_URL_TYPE:

			//create url obj
			URL url_get = new URL(url);

			//cast to http conn type
			conn = (HttpURLConnection) url_get.openConnection();

			//setup as a Get request.
			conn.setRequestMethod("GET");
			//conn.setDoInput(true);
			//conn.setDoOutput(true);

			//this will access the url, and get back a status code.
			int status_code = conn.getResponseCode();

			//if we have a valid status get the data.
			if(status_code ==HttpURLConnection.HTTP_OK)
			{
				rv = conn.getInputStream();
			}

			break;

		}


		//        //get the application ctx for this app.
		//        MyWeatherApplication weather_app = (MyWeatherApplication)getApplicationContext();
		//
		//        //get the dao session stored in the context.
		//        DaoSession dao_session = weather_app.getDaoSession();
		//
		//        //get the dao from the session.
		//        CityInfoTableDao dao = dao_session.getCityInfoTableDao();
		//
		//        //get data from dao with a specific id.
		//        List<CityInfoTable> city_info_list = dao.queryBuilder().where
		//                (CityInfoTableDao.Properties.City_id.eq(4891010)).list();
		//
		//        //check to see if we have valid data in the list before  we use it.
		//        if(city_info_list.size() > 0)
		//            Log.d(LOGTAG,"city name = "+city_info_list.get(0).getName());

//get the urls for http end pt retrieval.
//WeatherMapUrls.getCurrentWeatherByCityId("4891010");
//WeatherMapUrls.getWeatherIconByIconId("10d");

//        try
//        {
//            AssetManager assetManager = getAssets();
//
//            InputStream is = assetManager.open("sample_curr_weather.json");
//            String json_data = WeatherMapUtils.getJsonStringFromStream(is);
//
//            //assetManager.close();
//
//            //parse the json data and save it to the table.
//            WeatherJsonToDbProcessing.updateCurrWeatherToDb(json_data, dao_session);
//        }
//        catch (Exception e)
//        {
//            Log.d(LOGTAG,""+e);
//        }

//create intent with this activity as the sending activity, and the calling service.
        Intent mServiceIntent = new Intent(this, NetworkIntentSvc.class);

        //set the action to this intent.
        mServiceIntent.setAction(NetworkIntentSvc.CURRENT_WEATHER_ACTION);

        //create bundle to save data in it.
        Bundle bundle = new Bundle();
        bundle.putLong("cityId",cityId);

        //save bundle to this intent.
        mServiceIntent.putExtras(bundle);

        //start the service
        startService(mServiceIntent);

        Log.d(LOGTAG, "started service to get current weather data...with city id = "+cityId);

//    public static CityWeatherCurrCondTable getCurrentWeatherCity(long cityId, Context context)
//    {
//        //pojo ref.
//        CityWeatherCurrCondTable rv = null;
//
//        try
//        {
//            //get the dao session.
//            DaoSession daoSession = getDaoSession(context);
//
//            //get the current city weather dao.
//            CityWeatherCurrCondTableDao dao = daoSession.getCityWeatherCurrCondTableDao();
//
//            //get the java bean using the dao obj but use the city id to find it.
//            List<CityWeatherCurrCondTable> items = dao.queryBuilder().where
//                    (
//                            CityWeatherCurrCondTableDao.Properties.City_id.eq(cityId)
//                    ).list();
//
//            if(items.size() == 1){
//                rv = items.get(0);
//            }else if(items.size() == 0){
//                Log.d(LOGTAG, "didnt find the item yet.");
//            }else{
//                Log.d(LOGTAG, "list size = " + items.size() + ", this is an issue.");
//            }
//        }
//        catch(Exception e)
//        {
//            Log.d(LOGTAG,""+e);
//        }
//
//        //return the java bean.
//        return rv;
//    }
//
//    public CityInfoTable getCityInfo(long cityId, Context context)
//    {
//        //pojo ref.
//        CityInfoTable rv = null;
//
//        try
//        {
//            //get the dao session.
//            DaoSession daoSession = getDaoSession(context);
//
//            //get the current city weather dao.
//            CityInfoTableDao dao = daoSession.getCityInfoTableDao();
//
//            //get the java bean using the dao obj but use the city id to find it.
//            List<CityInfoTable> items = dao.queryBuilder().where
//                    (
//                            CityInfoTableDao.Properties.City_id.eq(cityId)
//                    ).list();
//
//            if(items.size() == 1){
//                rv = items.get(0);
//            }else if(items.size() == 0){
//                Log.d(LOGTAG, "didnt find the item yet.");
//            }else{
//                Log.d(LOGTAG, "list size = " + items.size() + ", this is an issue.");
//            }
//        }
//        catch(Exception e)
//        {
//            Log.d(LOGTAG,""+e);
//        }
//
//        //return the java bean.
//        return rv;
//    }

//        String rv = exception.getMessage()+"\n";
//
//        //get the stack trace as an array of stack items and get the to string from that array.
//        String stack_trace = Arrays.toString(exception.getStackTrace());
//
//        //replace the "," with "\n" to allow better formatting.
//        stack_trace = stack_trace.replace(",","\n");
//
//        //add the error with the stack trace.
//        rv += stack_trace;
//
//        return rv;

 // TODO: Rename parameter arguments, choose names that match
    // the fragment initialization parameters, e.g. ARG_ITEM_NUMBER
    private static final String ARG_PARAM1 = "param1";
    private static final String ARG_PARAM2 = "param2";

    // TODO: Rename and change types of parameters
    private String mParam1;
    private String mParam2;

    private OnFragmentInteractionListener mListener;

    // TODO: Rename and change types of parameters
    public static CityListFragment newInstance(String param1, String param2){
        CityListFragment fragment = new CityListFragment();
        Bundle args = new Bundle();
        args.putString(ARG_PARAM1, param1);
        args.putString(ARG_PARAM2, param2);
        fragment.setArguments(args);
        return fragment;
    }

    /**
     * Mandatory empty constructor for the fragment manager to instantiate the
     * fragment (e.g. upon screen orientation changes).
     */
    public CityListFragment(){
    }

    @Override
    public void onCreate(Bundle savedInstanceState){
        super.onCreate(savedInstanceState);

        if(getArguments() != null){
            mParam1 = getArguments().getString(ARG_PARAM1);
            mParam2 = getArguments().getString(ARG_PARAM2);
        }

        // TODO: Change Adapter to display your content
        setListAdapter(new ArrayAdapter<DummyContent.DummyItem>(getActivity(),
                android.R.layout.simple_list_item_1, android.R.id.text1, DummyContent.ITEMS));
    }

//public class CityListFragment extends Fragment implements AdapterView.OnItemClickListener

//    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState)
//    {
//        //inflate my view
//        View view = inflater.inflate(R.layout.city_list_fragment, container, false);
//
//        //get the list view from the layout
//        ListView myList = (ListView) view.findViewById(R.id.my_listView);
//
//        //add the handler when clicking the items on the list with the implemented method
//        //in this fragment
//        myList.setOnItemClickListener(this);
//
//        String [] gg = new String[]{"hello","goodbye","test1","sdfd","sdffsa","tata"};
//
////        int[] colors = {0, 0xFFFF0000, 0}; // red for the example
////        myList.setDivider(new GradientDrawable(GradientDrawable.Orientation.RIGHT_LEFT, colors));
////        myList.setDividerHeight(1);
//
//        ArrayAdapter<String> adapter =
//                new ArrayAdapter<String>(getActivity(), android.R.layout.simple_list_item_1, android.R.id.text1, gg);
//
//        //int[] colors = {0, 0xFFFF0000, 0}; // red for the example
//        //myList.setDivider(new GradientDrawable(GradientDrawable.Orientation.RIGHT_LEFT, colors));
//        //myList.setDividerHeight(1);
//
////        //set the adapter
////        myList.setAdapter(new ArrayAdapter<DummyContent.DummyItem>(getActivity(),
////                        android.R.layout.simple_list_item_1, android.R.id.text1, DummyContent.ITEMS));
//
//        myList.setAdapter(adapter);
//
//        return view;
//    }


//    @Override
//    public void onActivityCreated(Bundle savedInstanceState)
//    {
//        super.onActivityCreated(savedInstanceState);
////
//////        ListView lv = getListView();
//////        lv.setTextFilterEnabled(true);
//////        lv.setCacheColorHint(Color.TRANSPARENT);
//////        lv.setFastScrollEnabled(true);
//////
//////        lv.setDivider(getActivity().getResources().getDrawable(android.R.color.black));
//////        lv.setDividerHeight(1);
//////
//////        //lv.setBackgroundDrawable(getResources().getDrawable(R.drawable.merge)); //white background
//////        lv.setScrollingCacheEnabled(false);
//////        lv.setSmoothScrollbarEnabled(false);
////
//        //get the list view from this fragment.
//        //ListView listView = getListView();
//        //listView.setDivider(null);
//
//        //listView.setDivider(new ColorDrawable(0x99F10529));
//        //listView.setDividerHeight(1);
////
////        //listView.setDivider(new ColorDrawable(Color.TRANSPARENT));
////        //listView.setDividerHeight(1);
////        //listView.setDivider(R.drawable.abc_list_divider_mtrl_alpha);
////
////        //listView.setDivider(null);
//    }

//public void onItemClick(AdapterView<?> parent, View view, int position,long id)

<?xml version="1.0" encoding="utf-8"?>
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
              android:orientation="vertical"
              android:layout_width="match_parent"
              android:layout_height="match_parent">

    <ListView
        android:id="@+id/my_listView"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:cacheColorHint="#000"
        android:divider="#7F7F7F"
        android:dividerHeight="1dp"
        android:listSelector="@android:color/transparent" >
    </ListView>

</LinearLayout>