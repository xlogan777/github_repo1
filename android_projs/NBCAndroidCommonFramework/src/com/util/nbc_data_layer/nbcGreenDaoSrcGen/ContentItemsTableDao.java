package com.util.nbc_data_layer.nbcGreenDaoSrcGen;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;

import com.util.nbc_data_layer.nbcGreenDaoSrcGen.ContentItemsTable;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table CONTENT_ITEMS_TABLE.
*/
public class ContentItemsTableDao extends AbstractDao<ContentItemsTable, Long> {

    public static final String TABLENAME = "CONTENT_ITEMS_TABLE";

    /**
     * Properties of entity ContentItemsTable.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property CmsID = new Property(0, long.class, "CmsID", true, "CMS_ID");
        public final static Property ContentType = new Property(1, String.class, "ContentType", false, "CONTENT_TYPE");
        public final static Property Sponsored = new Property(2, boolean.class, "Sponsored", false, "SPONSORED");
        public final static Property ShareUrl = new Property(3, String.class, "ShareUrl", false, "SHARE_URL");
        public final static Property Link = new Property(4, String.class, "Link", false, "LINK");
        public final static Property Guid = new Property(5, String.class, "Guid", false, "GUID");
        public final static Property PubDate = new Property(6, String.class, "PubDate", false, "PUB_DATE");
        public final static Property PubDisplayDate = new Property(7, String.class, "PubDisplayDate", false, "PUB_DISPLAY_DATE");
        public final static Property SlugKeyword = new Property(8, String.class, "SlugKeyword", false, "SLUG_KEYWORD");
        public final static Property ContentTargetPath = new Property(9, String.class, "ContentTargetPath", false, "CONTENT_TARGET_PATH");
        public final static Property CntLeadMediaCmsID = new Property(10, long.class, "cntLeadMediaCmsID", false, "CNT_LEAD_MEDIA_CMS_ID");
        public final static Property CntMediaCmsID = new Property(11, long.class, "cntMediaCmsID", false, "CNT_MEDIA_CMS_ID");
        public final static Property CntItemDetailCmsID = new Property(12, long.class, "cntItemDetailCmsID", false, "CNT_ITEM_DETAIL_CMS_ID");
    };

    private DaoSession daoSession;


    public ContentItemsTableDao(DaoConfig config) {
        super(config);
    }
    
    public ContentItemsTableDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'CONTENT_ITEMS_TABLE' (" + //
                "'CMS_ID' INTEGER PRIMARY KEY NOT NULL ," + // 0: CmsID
                "'CONTENT_TYPE' TEXT NOT NULL ," + // 1: ContentType
                "'SPONSORED' INTEGER NOT NULL ," + // 2: Sponsored
                "'SHARE_URL' TEXT NOT NULL ," + // 3: ShareUrl
                "'LINK' TEXT NOT NULL ," + // 4: Link
                "'GUID' TEXT NOT NULL ," + // 5: Guid
                "'PUB_DATE' TEXT NOT NULL ," + // 6: PubDate
                "'PUB_DISPLAY_DATE' TEXT NOT NULL ," + // 7: PubDisplayDate
                "'SLUG_KEYWORD' TEXT NOT NULL ," + // 8: SlugKeyword
                "'CONTENT_TARGET_PATH' TEXT NOT NULL ," + // 9: ContentTargetPath
                "'CNT_LEAD_MEDIA_CMS_ID' INTEGER NOT NULL ," + // 10: cntLeadMediaCmsID
                "'CNT_MEDIA_CMS_ID' INTEGER NOT NULL ," + // 11: cntMediaCmsID
                "'CNT_ITEM_DETAIL_CMS_ID' INTEGER NOT NULL );"); // 12: cntItemDetailCmsID
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'CONTENT_ITEMS_TABLE'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ContentItemsTable entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getCmsID());
        stmt.bindString(2, entity.getContentType());
        stmt.bindLong(3, entity.getSponsored() ? 1l: 0l);
        stmt.bindString(4, entity.getShareUrl());
        stmt.bindString(5, entity.getLink());
        stmt.bindString(6, entity.getGuid());
        stmt.bindString(7, entity.getPubDate());
        stmt.bindString(8, entity.getPubDisplayDate());
        stmt.bindString(9, entity.getSlugKeyword());
        stmt.bindString(10, entity.getContentTargetPath());
        stmt.bindLong(11, entity.getCntLeadMediaCmsID());
        stmt.bindLong(12, entity.getCntMediaCmsID());
        stmt.bindLong(13, entity.getCntItemDetailCmsID());
    }

    @Override
    protected void attachEntity(ContentItemsTable entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public ContentItemsTable readEntity(Cursor cursor, int offset) {
        ContentItemsTable entity = new ContentItemsTable( //
            cursor.getLong(offset + 0), // CmsID
            cursor.getString(offset + 1), // ContentType
            cursor.getShort(offset + 2) != 0, // Sponsored
            cursor.getString(offset + 3), // ShareUrl
            cursor.getString(offset + 4), // Link
            cursor.getString(offset + 5), // Guid
            cursor.getString(offset + 6), // PubDate
            cursor.getString(offset + 7), // PubDisplayDate
            cursor.getString(offset + 8), // SlugKeyword
            cursor.getString(offset + 9), // ContentTargetPath
            cursor.getLong(offset + 10), // cntLeadMediaCmsID
            cursor.getLong(offset + 11), // cntMediaCmsID
            cursor.getLong(offset + 12) // cntItemDetailCmsID
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ContentItemsTable entity, int offset) {
        entity.setCmsID(cursor.getLong(offset + 0));
        entity.setContentType(cursor.getString(offset + 1));
        entity.setSponsored(cursor.getShort(offset + 2) != 0);
        entity.setShareUrl(cursor.getString(offset + 3));
        entity.setLink(cursor.getString(offset + 4));
        entity.setGuid(cursor.getString(offset + 5));
        entity.setPubDate(cursor.getString(offset + 6));
        entity.setPubDisplayDate(cursor.getString(offset + 7));
        entity.setSlugKeyword(cursor.getString(offset + 8));
        entity.setContentTargetPath(cursor.getString(offset + 9));
        entity.setCntLeadMediaCmsID(cursor.getLong(offset + 10));
        entity.setCntMediaCmsID(cursor.getLong(offset + 11));
        entity.setCntItemDetailCmsID(cursor.getLong(offset + 12));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(ContentItemsTable entity, long rowId) {
        entity.setCmsID(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(ContentItemsTable entity) {
        if(entity != null) {
            return entity.getCmsID();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getContentItemLeadMediaTableDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getContentItemMediaTableDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T2", daoSession.getContentItemDetailTableDao().getAllColumns());
            builder.append(" FROM CONTENT_ITEMS_TABLE T");
            builder.append(" LEFT JOIN CONTENT_ITEM_LEAD_MEDIA_TABLE T0 ON T.'CNT_LEAD_MEDIA_CMS_ID'=T0.'CMS_ID'");
            builder.append(" LEFT JOIN CONTENT_ITEM_MEDIA_TABLE T1 ON T.'CNT_MEDIA_CMS_ID'=T1.'CMS_ID'");
            builder.append(" LEFT JOIN CONTENT_ITEM_DETAIL_TABLE T2 ON T.'CNT_ITEM_DETAIL_CMS_ID'=T2.'CMS_ID'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected ContentItemsTable loadCurrentDeep(Cursor cursor, boolean lock) {
        ContentItemsTable entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        ContentItemLeadMediaTable contentItemLeadMediaTable = loadCurrentOther(daoSession.getContentItemLeadMediaTableDao(), cursor, offset);
         if(contentItemLeadMediaTable != null) {
            entity.setContentItemLeadMediaTable(contentItemLeadMediaTable);
        }
        offset += daoSession.getContentItemLeadMediaTableDao().getAllColumns().length;

        ContentItemMediaTable contentItemMediaTable = loadCurrentOther(daoSession.getContentItemMediaTableDao(), cursor, offset);
         if(contentItemMediaTable != null) {
            entity.setContentItemMediaTable(contentItemMediaTable);
        }
        offset += daoSession.getContentItemMediaTableDao().getAllColumns().length;

        ContentItemDetailTable contentItemDetailTable = loadCurrentOther(daoSession.getContentItemDetailTableDao(), cursor, offset);
         if(contentItemDetailTable != null) {
            entity.setContentItemDetailTable(contentItemDetailTable);
        }

        return entity;    
    }

    public ContentItemsTable loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<ContentItemsTable> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<ContentItemsTable> list = new ArrayList<ContentItemsTable>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<ContentItemsTable> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<ContentItemsTable> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
