package com.util.nbc_data_layer.nbcGreenDaoSrcGen;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.util.nbc_data_layer.nbcGreenDaoSrcGen.ImgFnameTable;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table IMG_FNAME_TABLE.
*/
public class ImgFnameTableDao extends AbstractDao<ImgFnameTable, Long> {

    public static final String TABLENAME = "IMG_FNAME_TABLE";

    /**
     * Properties of entity ImgFnameTable.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property ImgFnameID = new Property(0, long.class, "ImgFnameID", true, "IMG_FNAME_ID");
        public final static Property ImageFname = new Property(1, String.class, "ImageFname", false, "IMAGE_FNAME");
        public final static Property ImgFileRefCount = new Property(2, int.class, "ImgFileRefCount", false, "IMG_FILE_REF_COUNT");
    };


    public ImgFnameTableDao(DaoConfig config) {
        super(config);
    }
    
    public ImgFnameTableDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'IMG_FNAME_TABLE' (" + //
                "'IMG_FNAME_ID' INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL ," + // 0: ImgFnameID
                "'IMAGE_FNAME' TEXT NOT NULL ," + // 1: ImageFname
                "'IMG_FILE_REF_COUNT' INTEGER NOT NULL );"); // 2: ImgFileRefCount
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'IMG_FNAME_TABLE'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ImgFnameTable entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getImgFnameID());
        stmt.bindString(2, entity.getImageFname());
        stmt.bindLong(3, entity.getImgFileRefCount());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public ImgFnameTable readEntity(Cursor cursor, int offset) {
        ImgFnameTable entity = new ImgFnameTable( //
            cursor.getLong(offset + 0), // ImgFnameID
            cursor.getString(offset + 1), // ImageFname
            cursor.getInt(offset + 2) // ImgFileRefCount
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ImgFnameTable entity, int offset) {
        entity.setImgFnameID(cursor.getLong(offset + 0));
        entity.setImageFname(cursor.getString(offset + 1));
        entity.setImgFileRefCount(cursor.getInt(offset + 2));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(ImgFnameTable entity, long rowId) {
        entity.setImgFnameID(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(ImgFnameTable entity) {
        if(entity != null) {
            return entity.getImgFnameID();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
