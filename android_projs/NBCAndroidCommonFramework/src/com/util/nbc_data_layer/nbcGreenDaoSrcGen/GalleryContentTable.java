package com.util.nbc_data_layer.nbcGreenDaoSrcGen;

import com.util.nbc_data_layer.nbcGreenDaoSrcGen.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
import com.util.nbc_data_layer.EntityItemIface;
import com.util.nbc_data_layer.EntityVisitorIface;
import com.util.nbc_data_layer.NBCDataBaseHelper.T_UrlTypeToId;
//public class GalleryContentTable implements EntityItemIface{
// KEEP INCLUDES END
/**
 * Entity mapped to table GALLERY_CONTENT_TABLE.
 */
public class GalleryContentTable implements EntityItemIface{

    private Long id;
    private long GalCmsID;
    private long ImgIndex;
    private long GalleryImgPathUrlType;
    private long galleryImgPathUrlImgTypeRowID;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient GalleryContentTableDao myDao;

    private UrlImgFileTable urlImgFileTable;
    private Long urlImgFileTable__resolvedKey;


    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public GalleryContentTable() {
    }

    public GalleryContentTable(Long id) {
        this.id = id;
    }

    public GalleryContentTable(Long id, long GalCmsID, long ImgIndex, long GalleryImgPathUrlType, long galleryImgPathUrlImgTypeRowID) {
        this.id = id;
        this.GalCmsID = GalCmsID;
        this.ImgIndex = ImgIndex;
        this.GalleryImgPathUrlType = GalleryImgPathUrlType;
        this.galleryImgPathUrlImgTypeRowID = galleryImgPathUrlImgTypeRowID;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getGalleryContentTableDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public long getGalCmsID() {
        return GalCmsID;
    }

    public void setGalCmsID(long GalCmsID) {
        this.GalCmsID = GalCmsID;
    }

    public long getImgIndex() {
        return ImgIndex;
    }

    public void setImgIndex(long ImgIndex) {
        this.ImgIndex = ImgIndex;
    }

    public long getGalleryImgPathUrlType() {
        return GalleryImgPathUrlType;
    }

    public void setGalleryImgPathUrlType(long GalleryImgPathUrlType) {
        this.GalleryImgPathUrlType = GalleryImgPathUrlType;
    }

    public long getGalleryImgPathUrlImgTypeRowID() {
        return galleryImgPathUrlImgTypeRowID;
    }

    public void setGalleryImgPathUrlImgTypeRowID(long galleryImgPathUrlImgTypeRowID) {
        this.galleryImgPathUrlImgTypeRowID = galleryImgPathUrlImgTypeRowID;
    }

    /** To-one relationship, resolved on first access. */
    public UrlImgFileTable getUrlImgFileTable() {
        long __key = this.galleryImgPathUrlImgTypeRowID;
        if (urlImgFileTable__resolvedKey == null || !urlImgFileTable__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            UrlImgFileTableDao targetDao = daoSession.getUrlImgFileTableDao();
            UrlImgFileTable urlImgFileTableNew = targetDao.load(__key);
            synchronized (this) {
                urlImgFileTable = urlImgFileTableNew;
            	urlImgFileTable__resolvedKey = __key;
            }
        }
        return urlImgFileTable;
    }

    public void setUrlImgFileTable(UrlImgFileTable urlImgFileTable) {
        if (urlImgFileTable == null) {
            throw new DaoException("To-one property 'galleryImgPathUrlImgTypeRowID' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.urlImgFileTable = urlImgFileTable;
            galleryImgPathUrlImgTypeRowID = urlImgFileTable.getId();
            urlImgFileTable__resolvedKey = galleryImgPathUrlImgTypeRowID;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
	@Override
	public void accept(EntityVisitorIface entityVisitorIface, T_UrlTypeToId typeID, UrlImgFileTable urlImgFileTable) 
	{
		entityVisitorIface.visit(this,typeID,urlImgFileTable);
	}

	@Override
	public void accept(EntityVisitorIface entityVisitorIface, DaoSession daoSession, ContentItemsTable cntItemsTable) 
	{
		//dont do anything here
	}

	@Override
	public void accept(EntityVisitorIface entityVisitorIface, DaoSession daoSession) 
	{
		entityVisitorIface.visit(this, daoSession);
	}
    // KEEP METHODS END

}
