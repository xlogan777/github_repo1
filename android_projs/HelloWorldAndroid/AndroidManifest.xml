<!-- <?xml version="1.0" encoding="utf-8"?> -->
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
    package="com.example.helloworldandroid"
    android:versionCode="1"
    android:versionName="1.0" >

    <uses-sdk
        android:minSdkVersion="8"
        android:targetSdkVersion="19" />

    <application
        android:allowBackup="true"
        android:icon="@drawable/ic_launcher"
        android:label="@string/app_name"
        android:theme="@style/AppTheme" >

        <!-- main class for this activity class. [name] label tells which class to use. -->
        <activity
            android:name="com.example.helloworldandroid.MainActivity"
            android:label="@string/app_name" >
            <intent-filter>

                <!--
                      the items in the filter is for setting up what other activities can call this 
                     activity...for example, this is main and the category is launcher which makes this
                     the main entry point of this app.
                -->
                <!-- main entry point for app which is tied to this activity -->
                <action android:name="android.intent.action.MAIN" />

                <!-- this is saying that the main activity is the first entry point. -->
                <category android:name="android.intent.category.LAUNCHER" />
            </intent-filter>
        </activity>

        <!-- this added a service for our activities to start and bind to -->
        <service
            android:name="com.example.helloworldandroid.HelloService"
            android:enabled="true" />

        <!-- this is the broadcast type to be used in android os. -->
        <!--
             it is registering the Receiver class with specific events, one being the system event boot_complete
             and the other is a custom event being generated by the main activity...as a sendBroadcast call...-->
        <!-- FOR THE RECEIVER, ALWAYS ENABLE THE ANDROID ATTRIBUTE IN THE XML..OTHERWISE THE RECEIVER WONT SEE THE EVENT. -->
        <receiver
            android:name="com.example.helloworldandroid.HelloReceiver"
            android:enabled="true"
            android:exported="false" >
            <intent-filter>

                <!-- listen for android is boot complete event. OS intent -->
                <!-- <action android:name="android.intent.action.BOOT_COMPLETED" /> -->


                <!-- this is my own custom intent -->
                <action android:name="com.example.helloworldandroid.CUSTOM_INTENT" />
            </intent-filter>
        </receiver>

        <!-- this is the content provider area to be used -->
        <!-- the authorities is the uri that users can use to access this content provider. -->
        <provider
            android:name="com.example.helloworldandroid.HelloContentProvider"
            android:authorities="com.example.helloworldandroid.College"
            android:enabled="true"
            android:exported="false" />

        <!-- added new activity for showing fragments samples. -->
        <activity
            android:name="com.example.helloworldandroid.SampleFragmentActivity"
            android:label="@string/title_activity_sample_fragment" >
        </activity>

        <!-- this is for the intent demo area for testing.. -->
        <activity
            android:name="com.example.helloworldandroid.IntentDemoActivity"
            android:label="@string/title_activity_intent_demo" >
        </activity>

        <!--
             this is the custom activity that allows for testing intent filter...
            this activity should only get called when the intent filter checks are passed.
        -->
        <activity
            android:name="com.example.helloworldandroid.CustomIntentFilterActivity"
            android:label="@string/title_activity_custom_intent_filter" >

            <!-- this intent filter is setting up who can invoke this activity. -->
            <!-- when setting up an intent, it needs atleast one action..otherwise it will block all intent. -->
            <intent-filter>

                <!--
                     this is the action.view intent type, and the com.example.intentdemo.LAUNCH actions
                     but it will allow to be invoked only if that activity is of the same category which is
                     DEFAULT in this case. the data to be used is setup as http..which must be in the form
                     http://
                -->
                <!--
                     this action.view is an already existing action tied to the internal web-broswer, it
                     asks the use to pick between the internal browser and this activity to invoke.
                -->
                <action android:name="android.intent.action.VIEW" />

                <!-- using this action directly calls this activity to handle this intent. -->
                <action android:name="com.example.intentdemo.LAUNCH" />

                <!--
                    this can be empty, but if found...then the intent obj categories 
                      must match all the categories found here
                -->
                <category android:name="android.intent.category.DEFAULT" />

                <!--
                    this can contain many other attributes to test for like uri, port..etc
                   the intent object passed needs to pass the uri and data type part.
                -->
                <data android:scheme="http" />
            </intent-filter>
        </activity>
        
        <!-- this is for the UI layout examples activity-->
        <activity
            android:name="com.example.helloworldandroid.UserIfaceLayoutActivity"
            android:label="@string/title_activity_user_iface_layout" >
        </activity>
        
    </application>

</manifest>
