package com.util.nbc_data_layer.nbcGreenDaoSrcGen;

import com.util.nbc_data_layer.nbcGreenDaoSrcGen.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table CONTENT_ITEM_MEDIA_TABLE.
 */
public class ContentItemMediaTable {

    private long CmsID;
    private long MediaUrlType;
    private long MediaPhotoThumbnailUrlType;
    /** Not-null value. */
    private String MediaThumbnailUrlType;
    private long mediaCmsID;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient ContentItemMediaTableDao myDao;

    private UrlImgFileTable urlImgFileTable;
    private Long urlImgFileTable__resolvedKey;


    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public ContentItemMediaTable() {
    }

    public ContentItemMediaTable(long CmsID) {
        this.CmsID = CmsID;
    }

    public ContentItemMediaTable(long CmsID, long MediaUrlType, long MediaPhotoThumbnailUrlType, String MediaThumbnailUrlType, long mediaCmsID) {
        this.CmsID = CmsID;
        this.MediaUrlType = MediaUrlType;
        this.MediaPhotoThumbnailUrlType = MediaPhotoThumbnailUrlType;
        this.MediaThumbnailUrlType = MediaThumbnailUrlType;
        this.mediaCmsID = mediaCmsID;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getContentItemMediaTableDao() : null;
    }

    public long getCmsID() {
        return CmsID;
    }

    public void setCmsID(long CmsID) {
        this.CmsID = CmsID;
    }

    public long getMediaUrlType() {
        return MediaUrlType;
    }

    public void setMediaUrlType(long MediaUrlType) {
        this.MediaUrlType = MediaUrlType;
    }

    public long getMediaPhotoThumbnailUrlType() {
        return MediaPhotoThumbnailUrlType;
    }

    public void setMediaPhotoThumbnailUrlType(long MediaPhotoThumbnailUrlType) {
        this.MediaPhotoThumbnailUrlType = MediaPhotoThumbnailUrlType;
    }

    /** Not-null value. */
    public String getMediaThumbnailUrlType() {
        return MediaThumbnailUrlType;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setMediaThumbnailUrlType(String MediaThumbnailUrlType) {
        this.MediaThumbnailUrlType = MediaThumbnailUrlType;
    }

    public long getMediaCmsID() {
        return mediaCmsID;
    }

    public void setMediaCmsID(long mediaCmsID) {
        this.mediaCmsID = mediaCmsID;
    }

    /** To-one relationship, resolved on first access. */
    public UrlImgFileTable getUrlImgFileTable() {
        long __key = this.mediaCmsID;
        if (urlImgFileTable__resolvedKey == null || !urlImgFileTable__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            UrlImgFileTableDao targetDao = daoSession.getUrlImgFileTableDao();
            UrlImgFileTable urlImgFileTableNew = targetDao.load(__key);
            synchronized (this) {
                urlImgFileTable = urlImgFileTableNew;
            	urlImgFileTable__resolvedKey = __key;
            }
        }
        return urlImgFileTable;
    }

    public void setUrlImgFileTable(UrlImgFileTable urlImgFileTable) {
        if (urlImgFileTable == null) {
            throw new DaoException("To-one property 'mediaCmsID' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.urlImgFileTable = urlImgFileTable;
            mediaCmsID = urlImgFileTable.getId();
            urlImgFileTable__resolvedKey = mediaCmsID;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
