package com.util.nbc_data_layer.nbcGreenDaoSrcGen;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;

import com.util.nbc_data_layer.nbcGreenDaoSrcGen.RelatedItemsTable;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table RELATED_ITEMS_TABLE.
*/
public class RelatedItemsTableDao extends AbstractDao<RelatedItemsTable, Long> {

    public static final String TABLENAME = "RELATED_ITEMS_TABLE";

    /**
     * Properties of entity RelatedItemsTable.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ParentCmsID = new Property(1, long.class, "ParentCmsID", false, "PARENT_CMS_ID");
        public final static Property RelCmsID = new Property(2, long.class, "RelCmsID", false, "REL_CMS_ID");
        public final static Property ContentType = new Property(3, String.class, "ContentType", false, "CONTENT_TYPE");
        public final static Property Title = new Property(4, String.class, "Title", false, "TITLE");
        public final static Property Sponsored = new Property(5, boolean.class, "Sponsored", false, "SPONSORED");
        public final static Property Source = new Property(6, String.class, "Source", false, "SOURCE");
        public final static Property RelItemMobileThumbnailUrlType = new Property(7, long.class, "RelItemMobileThumbnailUrlType", false, "REL_ITEM_MOBILE_THUMBNAIL_URL_TYPE");
        public final static Property RelItemStoryThumbnailUrlType = new Property(8, long.class, "RelItemStoryThumbnailUrlType", false, "REL_ITEM_STORY_THUMBNAIL_URL_TYPE");
        public final static Property SharingUrl = new Property(9, String.class, "SharingUrl", false, "SHARING_URL");
        public final static Property TypeID = new Property(10, long.class, "TypeID", false, "TYPE_ID");
        public final static Property RelItemMobileThumbnailUrlImgTypeRowID = new Property(11, long.class, "relItemMobileThumbnailUrlImgTypeRowID", false, "REL_ITEM_MOBILE_THUMBNAIL_URL_IMG_TYPE_ROW_ID");
        public final static Property RelItemStoryThumbnailUrlImgTypeRowID = new Property(12, long.class, "relItemStoryThumbnailUrlImgTypeRowID", false, "REL_ITEM_STORY_THUMBNAIL_URL_IMG_TYPE_ROW_ID");
    };

    private DaoSession daoSession;


    public RelatedItemsTableDao(DaoConfig config) {
        super(config);
    }
    
    public RelatedItemsTableDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'RELATED_ITEMS_TABLE' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'PARENT_CMS_ID' INTEGER NOT NULL ," + // 1: ParentCmsID
                "'REL_CMS_ID' INTEGER NOT NULL ," + // 2: RelCmsID
                "'CONTENT_TYPE' TEXT NOT NULL ," + // 3: ContentType
                "'TITLE' TEXT NOT NULL ," + // 4: Title
                "'SPONSORED' INTEGER NOT NULL ," + // 5: Sponsored
                "'SOURCE' TEXT NOT NULL ," + // 6: Source
                "'REL_ITEM_MOBILE_THUMBNAIL_URL_TYPE' INTEGER NOT NULL ," + // 7: RelItemMobileThumbnailUrlType
                "'REL_ITEM_STORY_THUMBNAIL_URL_TYPE' INTEGER NOT NULL ," + // 8: RelItemStoryThumbnailUrlType
                "'SHARING_URL' TEXT NOT NULL ," + // 9: SharingUrl
                "'TYPE_ID' INTEGER NOT NULL ," + // 10: TypeID
                "'REL_ITEM_MOBILE_THUMBNAIL_URL_IMG_TYPE_ROW_ID' INTEGER NOT NULL ," + // 11: relItemMobileThumbnailUrlImgTypeRowID
                "'REL_ITEM_STORY_THUMBNAIL_URL_IMG_TYPE_ROW_ID' INTEGER NOT NULL );"); // 12: relItemStoryThumbnailUrlImgTypeRowID
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'RELATED_ITEMS_TABLE'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, RelatedItemsTable entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getParentCmsID());
        stmt.bindLong(3, entity.getRelCmsID());
        stmt.bindString(4, entity.getContentType());
        stmt.bindString(5, entity.getTitle());
        stmt.bindLong(6, entity.getSponsored() ? 1l: 0l);
        stmt.bindString(7, entity.getSource());
        stmt.bindLong(8, entity.getRelItemMobileThumbnailUrlType());
        stmt.bindLong(9, entity.getRelItemStoryThumbnailUrlType());
        stmt.bindString(10, entity.getSharingUrl());
        stmt.bindLong(11, entity.getTypeID());
        stmt.bindLong(12, entity.getRelItemMobileThumbnailUrlImgTypeRowID());
        stmt.bindLong(13, entity.getRelItemStoryThumbnailUrlImgTypeRowID());
    }

    @Override
    protected void attachEntity(RelatedItemsTable entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public RelatedItemsTable readEntity(Cursor cursor, int offset) {
        RelatedItemsTable entity = new RelatedItemsTable( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // ParentCmsID
            cursor.getLong(offset + 2), // RelCmsID
            cursor.getString(offset + 3), // ContentType
            cursor.getString(offset + 4), // Title
            cursor.getShort(offset + 5) != 0, // Sponsored
            cursor.getString(offset + 6), // Source
            cursor.getLong(offset + 7), // RelItemMobileThumbnailUrlType
            cursor.getLong(offset + 8), // RelItemStoryThumbnailUrlType
            cursor.getString(offset + 9), // SharingUrl
            cursor.getLong(offset + 10), // TypeID
            cursor.getLong(offset + 11), // relItemMobileThumbnailUrlImgTypeRowID
            cursor.getLong(offset + 12) // relItemStoryThumbnailUrlImgTypeRowID
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, RelatedItemsTable entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setParentCmsID(cursor.getLong(offset + 1));
        entity.setRelCmsID(cursor.getLong(offset + 2));
        entity.setContentType(cursor.getString(offset + 3));
        entity.setTitle(cursor.getString(offset + 4));
        entity.setSponsored(cursor.getShort(offset + 5) != 0);
        entity.setSource(cursor.getString(offset + 6));
        entity.setRelItemMobileThumbnailUrlType(cursor.getLong(offset + 7));
        entity.setRelItemStoryThumbnailUrlType(cursor.getLong(offset + 8));
        entity.setSharingUrl(cursor.getString(offset + 9));
        entity.setTypeID(cursor.getLong(offset + 10));
        entity.setRelItemMobileThumbnailUrlImgTypeRowID(cursor.getLong(offset + 11));
        entity.setRelItemStoryThumbnailUrlImgTypeRowID(cursor.getLong(offset + 12));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(RelatedItemsTable entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(RelatedItemsTable entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getUrlImgFileTableDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getUrlImgFileTableDao().getAllColumns());
            builder.append(" FROM RELATED_ITEMS_TABLE T");
            builder.append(" LEFT JOIN URL_IMG_FILE_TABLE T0 ON T.'REL_ITEM_MOBILE_THUMBNAIL_URL_IMG_TYPE_ROW_ID'=T0.'_id'");
            builder.append(" LEFT JOIN URL_IMG_FILE_TABLE T1 ON T.'REL_ITEM_STORY_THUMBNAIL_URL_IMG_TYPE_ROW_ID'=T1.'_id'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected RelatedItemsTable loadCurrentDeep(Cursor cursor, boolean lock) {
        RelatedItemsTable entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        UrlImgFileTable relItemMobileThumbnailUrlImgType = loadCurrentOther(daoSession.getUrlImgFileTableDao(), cursor, offset);
         if(relItemMobileThumbnailUrlImgType != null) {
            entity.setRelItemMobileThumbnailUrlImgType(relItemMobileThumbnailUrlImgType);
        }
        offset += daoSession.getUrlImgFileTableDao().getAllColumns().length;

        UrlImgFileTable relItemStoryThumbnailUrlImgType = loadCurrentOther(daoSession.getUrlImgFileTableDao(), cursor, offset);
         if(relItemStoryThumbnailUrlImgType != null) {
            entity.setRelItemStoryThumbnailUrlImgType(relItemStoryThumbnailUrlImgType);
        }

        return entity;    
    }

    public RelatedItemsTable loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<RelatedItemsTable> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<RelatedItemsTable> list = new ArrayList<RelatedItemsTable>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<RelatedItemsTable> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<RelatedItemsTable> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
