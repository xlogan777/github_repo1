package jmtechsvcs.myweatherapp.GreenDaoSrcGen;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import jmtechsvcs.myweatherapp.GreenDaoSrcGen.CityInfoTable;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table CITY_INFO_TABLE.
*/
public class CityInfoTableDao extends AbstractDao<CityInfoTable, Long> {

    public static final String TABLENAME = "CITY_INFO_TABLE";

    /**
     * Properties of entity CityInfoTable.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property City_id = new Property(0, long.class, "city_id", true, "CITY_ID");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Country = new Property(2, String.class, "country", false, "COUNTRY");
        public final static Property Lon = new Property(3, double.class, "lon", false, "LON");
        public final static Property Lat = new Property(4, double.class, "lat", false, "LAT");
    };


    public CityInfoTableDao(DaoConfig config) {
        super(config);
    }
    
    public CityInfoTableDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'CITY_INFO_TABLE' (" + //
                "'CITY_ID' INTEGER PRIMARY KEY NOT NULL ," + // 0: city_id
                "'NAME' TEXT NOT NULL ," + // 1: name
                "'COUNTRY' TEXT NOT NULL ," + // 2: country
                "'LON' REAL NOT NULL ," + // 3: lon
                "'LAT' REAL NOT NULL );"); // 4: lat
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'CITY_INFO_TABLE'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, CityInfoTable entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getCity_id());
        stmt.bindString(2, entity.getName());
        stmt.bindString(3, entity.getCountry());
        stmt.bindDouble(4, entity.getLon());
        stmt.bindDouble(5, entity.getLat());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public CityInfoTable readEntity(Cursor cursor, int offset) {
        CityInfoTable entity = new CityInfoTable( //
            cursor.getLong(offset + 0), // city_id
            cursor.getString(offset + 1), // name
            cursor.getString(offset + 2), // country
            cursor.getDouble(offset + 3), // lon
            cursor.getDouble(offset + 4) // lat
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, CityInfoTable entity, int offset) {
        entity.setCity_id(cursor.getLong(offset + 0));
        entity.setName(cursor.getString(offset + 1));
        entity.setCountry(cursor.getString(offset + 2));
        entity.setLon(cursor.getDouble(offset + 3));
        entity.setLat(cursor.getDouble(offset + 4));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(CityInfoTable entity, long rowId) {
        entity.setCity_id(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(CityInfoTable entity) {
        if(entity != null) {
            return entity.getCity_id();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
