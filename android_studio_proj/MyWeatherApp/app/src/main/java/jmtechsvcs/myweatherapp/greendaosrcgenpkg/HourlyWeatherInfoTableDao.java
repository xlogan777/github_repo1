package jmtechsvcs.myweatherapp.greendaosrcgenpkg;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import jmtechsvcs.myweatherapp.greendaosrcgenpkg.HourlyWeatherInfoTable;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "HOURLY_WEATHER_INFO_TABLE".
*/
public class HourlyWeatherInfoTableDao extends AbstractDao<HourlyWeatherInfoTable, Long> {

    public static final String TABLENAME = "HOURLY_WEATHER_INFO_TABLE";

    /**
     * Properties of entity HourlyWeatherInfoTable.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property City_id = new Property(1, long.class, "city_id", false, "CITY_ID");
        public final static Property Hourly_weather_date = new Property(2, long.class, "hourly_weather_date", false, "HOURLY_WEATHER_DATE");
        public final static Property Hourly_cloud_pert = new Property(3, double.class, "hourly_cloud_pert", false, "HOURLY_CLOUD_PERT");
        public final static Property Hourly_humidity = new Property(4, double.class, "hourly_humidity", false, "HOURLY_HUMIDITY");
        public final static Property Hourly_max_temp = new Property(5, double.class, "hourly_max_temp", false, "HOURLY_MAX_TEMP");
        public final static Property Hourly_min_temp = new Property(6, double.class, "hourly_min_temp", false, "HOURLY_MIN_TEMP");
        public final static Property Hourly_pressure = new Property(7, double.class, "hourly_pressure", false, "HOURLY_PRESSURE");
        public final static Property Hourly_temp = new Property(8, double.class, "hourly_temp", false, "HOURLY_TEMP");
        public final static Property Hourly_sea_level = new Property(9, double.class, "hourly_sea_level", false, "HOURLY_SEA_LEVEL");
        public final static Property Hourly_gnd_level = new Property(10, double.class, "hourly_gnd_level", false, "HOURLY_GND_LEVEL");
        public final static Property Hourly_wind_deg = new Property(11, double.class, "hourly_wind_deg", false, "HOURLY_WIND_DEG");
        public final static Property Hourly_wind_speed = new Property(12, double.class, "hourly_wind_speed", false, "HOURLY_WIND_SPEED");
    };


    public HourlyWeatherInfoTableDao(DaoConfig config) {
        super(config);
    }
    
    public HourlyWeatherInfoTableDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"HOURLY_WEATHER_INFO_TABLE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"CITY_ID\" INTEGER NOT NULL ," + // 1: city_id
                "\"HOURLY_WEATHER_DATE\" INTEGER NOT NULL ," + // 2: hourly_weather_date
                "\"HOURLY_CLOUD_PERT\" REAL NOT NULL ," + // 3: hourly_cloud_pert
                "\"HOURLY_HUMIDITY\" REAL NOT NULL ," + // 4: hourly_humidity
                "\"HOURLY_MAX_TEMP\" REAL NOT NULL ," + // 5: hourly_max_temp
                "\"HOURLY_MIN_TEMP\" REAL NOT NULL ," + // 6: hourly_min_temp
                "\"HOURLY_PRESSURE\" REAL NOT NULL ," + // 7: hourly_pressure
                "\"HOURLY_TEMP\" REAL NOT NULL ," + // 8: hourly_temp
                "\"HOURLY_SEA_LEVEL\" REAL NOT NULL ," + // 9: hourly_sea_level
                "\"HOURLY_GND_LEVEL\" REAL NOT NULL ," + // 10: hourly_gnd_level
                "\"HOURLY_WIND_DEG\" REAL NOT NULL ," + // 11: hourly_wind_deg
                "\"HOURLY_WIND_SPEED\" REAL NOT NULL );"); // 12: hourly_wind_speed
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"HOURLY_WEATHER_INFO_TABLE\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, HourlyWeatherInfoTable entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getCity_id());
        stmt.bindLong(3, entity.getHourly_weather_date());
        stmt.bindDouble(4, entity.getHourly_cloud_pert());
        stmt.bindDouble(5, entity.getHourly_humidity());
        stmt.bindDouble(6, entity.getHourly_max_temp());
        stmt.bindDouble(7, entity.getHourly_min_temp());
        stmt.bindDouble(8, entity.getHourly_pressure());
        stmt.bindDouble(9, entity.getHourly_temp());
        stmt.bindDouble(10, entity.getHourly_sea_level());
        stmt.bindDouble(11, entity.getHourly_gnd_level());
        stmt.bindDouble(12, entity.getHourly_wind_deg());
        stmt.bindDouble(13, entity.getHourly_wind_speed());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public HourlyWeatherInfoTable readEntity(Cursor cursor, int offset) {
        HourlyWeatherInfoTable entity = new HourlyWeatherInfoTable( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // city_id
            cursor.getLong(offset + 2), // hourly_weather_date
            cursor.getDouble(offset + 3), // hourly_cloud_pert
            cursor.getDouble(offset + 4), // hourly_humidity
            cursor.getDouble(offset + 5), // hourly_max_temp
            cursor.getDouble(offset + 6), // hourly_min_temp
            cursor.getDouble(offset + 7), // hourly_pressure
            cursor.getDouble(offset + 8), // hourly_temp
            cursor.getDouble(offset + 9), // hourly_sea_level
            cursor.getDouble(offset + 10), // hourly_gnd_level
            cursor.getDouble(offset + 11), // hourly_wind_deg
            cursor.getDouble(offset + 12) // hourly_wind_speed
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, HourlyWeatherInfoTable entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCity_id(cursor.getLong(offset + 1));
        entity.setHourly_weather_date(cursor.getLong(offset + 2));
        entity.setHourly_cloud_pert(cursor.getDouble(offset + 3));
        entity.setHourly_humidity(cursor.getDouble(offset + 4));
        entity.setHourly_max_temp(cursor.getDouble(offset + 5));
        entity.setHourly_min_temp(cursor.getDouble(offset + 6));
        entity.setHourly_pressure(cursor.getDouble(offset + 7));
        entity.setHourly_temp(cursor.getDouble(offset + 8));
        entity.setHourly_sea_level(cursor.getDouble(offset + 9));
        entity.setHourly_gnd_level(cursor.getDouble(offset + 10));
        entity.setHourly_wind_deg(cursor.getDouble(offset + 11));
        entity.setHourly_wind_speed(cursor.getDouble(offset + 12));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(HourlyWeatherInfoTable entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(HourlyWeatherInfoTable entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
