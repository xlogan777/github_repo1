package com.util.nbc_data_layer.nbcGreenDaoSrcGen;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.util.nbc_data_layer.nbcGreenDaoSrcGen.ContentItemMediaTable;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table CONTENT_ITEM_MEDIA_TABLE.
*/
public class ContentItemMediaTableDao extends AbstractDao<ContentItemMediaTable, Long> {

    public static final String TABLENAME = "CONTENT_ITEM_MEDIA_TABLE";

    /**
     * Properties of entity ContentItemMediaTable.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property CmsID = new Property(0, long.class, "CmsID", true, "CMS_ID");
        public final static Property Url = new Property(1, String.class, "Url", false, "URL");
        public final static Property Width = new Property(2, int.class, "Width", false, "WIDTH");
        public final static Property Height = new Property(3, int.class, "Height", false, "HEIGHT");
        public final static Property ImageCredit = new Property(4, String.class, "ImageCredit", false, "IMAGE_CREDIT");
        public final static Property PhotoThumbnail = new Property(5, String.class, "PhotoThumbnail", false, "PHOTO_THUMBNAIL");
        public final static Property Thumbnail = new Property(6, String.class, "Thumbnail", false, "THUMBNAIL");
    };


    public ContentItemMediaTableDao(DaoConfig config) {
        super(config);
    }
    
    public ContentItemMediaTableDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'CONTENT_ITEM_MEDIA_TABLE' (" + //
                "'CMS_ID' INTEGER PRIMARY KEY NOT NULL ," + // 0: CmsID
                "'URL' TEXT NOT NULL ," + // 1: Url
                "'WIDTH' INTEGER NOT NULL ," + // 2: Width
                "'HEIGHT' INTEGER NOT NULL ," + // 3: Height
                "'IMAGE_CREDIT' TEXT NOT NULL ," + // 4: ImageCredit
                "'PHOTO_THUMBNAIL' TEXT NOT NULL ," + // 5: PhotoThumbnail
                "'THUMBNAIL' TEXT NOT NULL );"); // 6: Thumbnail
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'CONTENT_ITEM_MEDIA_TABLE'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ContentItemMediaTable entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getCmsID());
        stmt.bindString(2, entity.getUrl());
        stmt.bindLong(3, entity.getWidth());
        stmt.bindLong(4, entity.getHeight());
        stmt.bindString(5, entity.getImageCredit());
        stmt.bindString(6, entity.getPhotoThumbnail());
        stmt.bindString(7, entity.getThumbnail());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public ContentItemMediaTable readEntity(Cursor cursor, int offset) {
        ContentItemMediaTable entity = new ContentItemMediaTable( //
            cursor.getLong(offset + 0), // CmsID
            cursor.getString(offset + 1), // Url
            cursor.getInt(offset + 2), // Width
            cursor.getInt(offset + 3), // Height
            cursor.getString(offset + 4), // ImageCredit
            cursor.getString(offset + 5), // PhotoThumbnail
            cursor.getString(offset + 6) // Thumbnail
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ContentItemMediaTable entity, int offset) {
        entity.setCmsID(cursor.getLong(offset + 0));
        entity.setUrl(cursor.getString(offset + 1));
        entity.setWidth(cursor.getInt(offset + 2));
        entity.setHeight(cursor.getInt(offset + 3));
        entity.setImageCredit(cursor.getString(offset + 4));
        entity.setPhotoThumbnail(cursor.getString(offset + 5));
        entity.setThumbnail(cursor.getString(offset + 6));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(ContentItemMediaTable entity, long rowId) {
        entity.setCmsID(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(ContentItemMediaTable entity) {
        if(entity != null) {
            return entity.getCmsID();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
